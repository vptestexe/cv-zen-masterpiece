
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://fnedkxjlmcnarvajtfyj.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZuZWRreGpsbWNuYXJ2YWp0ZnlqIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDUzMzU1ODMsImV4cCI6MjA2MDkxMTU4M30.ShxorgCbDo4bA0Sbv1Upjf-GZIiZBQ4x0oO9GrXyUX4";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Configurer explicitement le client avec les options d'authentification
export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      autoRefreshToken: true,
      persistSession: true,
      storage: localStorage
    }
  }
);

// Fonction stub pour get_ad_stats
// Note: Cette fonction devra être implémentée côté Supabase via une fonction RPC
supabase.rpc = function(fnName: string, params?: any) {
  if (fnName === 'get_ad_stats') {
    // Simuler des données pour l'interface utilisateur
    return {
      data: Array(params?.days || 7).fill(0).map((_, i) => {
        const date = new Date();
        date.setDate(date.getDate() - i);
        return {
          id: `stat-${i}`,
          placementId: `placement-${i % 3}`,
          impressions: Math.floor(Math.random() * 1000) + 500,
          clicks: Math.floor(Math.random() * 50) + 10,
          date: date.toISOString().split('T')[0]
        };
      }),
      error: null,
      limit: (n: number) => ({ data: [], error: null }),
    };
  }
  
  if (fnName === 'is_admin') {
    // Fonction stub pour is_admin qui retourne toujours true
    return {
      data: true,
      error: null
    };
  }
  
  return {
    data: null,
    error: { message: `Function ${fnName} not implemented` }
  };
} as any;
